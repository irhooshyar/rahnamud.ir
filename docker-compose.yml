version: '3.7'
services:

    django:
#        restart: always
        dns: 0.0.0.0
        env_file: .env
        build:
            dockerfile: ./docker/django/dev/Dockerfile
            args:
                LOAD_MODELS: ${LOAD_MODELS}
        ports:
            - "${DJANGO_PORT}:8000"
        command: python manage.py runserver 0.0.0.0:8000
        volumes:
            - .:/app
            - django_media_cdn_volume:/app/media_cdn
        depends_on:
            - mysql
            - elasticsearch
#        networks:
#            - no-internet
        environment:
            ES_URL: 'elasticsearch:9200'
            DB_URL: 'mysql'
            LOAD_MODELS: ${LOAD_MODELS}
            DOCKER_BUILDKIT: 1
            DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
            PRODUCTION: false
            MYSQL_ROOT_PWD: ${MYSQL_ROOT_PWD}

#    node:
#        env_file: .env
#        build:
#            dockerfile: ./docker/node/dev/Dockerfile
#        environment:
#            - NODE_ENV=development
#            - WATCHPACK_POLLING=true
#        command: npm start
##        depends_on:
##            - django
#        ports:
#            - "${NODE_PORT}:3000"
#        volumes:
#            - ./Frontend:/app
#            - /app/node_modules

    mysql:
#        restart: always
        dns: 0.0.0.0
        env_file: .env
        image: mysql/mysql-server:5.7.40
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PWD}
            MYSQL_ROOT_HOST: '%'
#        networks:
#            - no-internet
        volumes:
            - mysql_volume:/var/lib/mysql
            - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
            - ./docker/mysql/backup:/etc/mysql/backup
            - ./docker/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

    elasticsearch:
#        restart: always
        dns: 0.0.0.0
        build:
            dockerfile: ./docker/elasticsearch/Dockerfile
        environment:
            - "bootstrap.memory_lock=true"
            - "discovery.type=single-node"
            - "ES_JAVA_OPTS=-Xms4096m -Xmx4096m"
#        networks:
#            - no-internet
        ulimits:
            memlock:
                soft: -1
                hard: -1
#        ports:
#            - "7086:9200"
        volumes:
            - elasticsearch_volume:/usr/share/elasticsearch/data
            - ./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
            - ./docker/elasticsearch/config/all_stopwords.txt:/usr/share/elasticsearch/config/all_stopwords.txt
            - ./docker/elasticsearch/config/cybermap_stopwords.txt:/usr/share/elasticsearch/config/cybermap_stopwords.txt
            - ./docker/elasticsearch/config/persian_stopwords.txt:/usr/share/elasticsearch/config/persian_stopwords.txt
            - ./docker/elasticsearch/config/char_filter/zero_width_spaces_filter.txt:/usr/share/elasticsearch/config/char_filter/zero_width_spaces_filter.txt

    phpmyadmin:
#        restart: always
        dns: 0.0.0.0
        env_file: .env
        image: phpmyadmin:5.2.0
        ports:
            - "${PHPMYADMIN_PORT}:80"
#        networks:
#            - no-internet
        environment:
            PMA_ARBITRARY: 1
        depends_on:
            - mysql

    kibana:
#        restart: always
        dns: 0.0.0.0
        env_file: .env
        image: kibana:7.13.1
#        networks:
#            - no-internet
        ports:
            - "${KIBANA_PORT}:5601"
        depends_on:
            - elasticsearch
        mem_limit: 1g


networks:
    no-internet:
#        driver: bridge
        internal: true
#    internet:
#        driver: bridge

volumes:
    django_media_cdn_volume:
    mysql_volume:
    elasticsearch_volume: